# -*- coding: utf-8 -*-
"""Bike share data.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/10QuCORpmpoJ5Wh1A7OPk_2ckAhwwQzuk
"""

import time
import pandas as pd
import numpy as np
import plotly.express as px
CITY_DATA = { 'chicago': 'chicago.csv',
              'new york city': 'new_york_city.csv',
              'washington': 'washington.csv' }

def get_filters():
    """
    Asks user to specify a city, month, and day to analyze.

    Returns:
        (str) city - name of the city to analyze
        (str) month - name of the month to filter by, or "all" to apply no month filter
        (str) day - name of the day of week to filter by, or "all" to apply no day filter
    """
    valid_months = ["january", "february", "march", "april", "may", "june","all"]
    valid_days = ["monday", "tuesday", "wednesday",
        "thursday", "friday", "saturday", "sunday","all"]
    valid_citys = ['chicago','washington','new york city']
    try:
        print('Hello! Let\'s explore some US bikeshare data!')
         # get user input for city (chicago, new york city, washington). HINT: Use a while loop to handle invalid inputs
        city = str(input("Please Enter the name of the city :")).lower()

         #get user input for month (all, january, february, ... , june)
        month = str(input("Enter the months first half of the year (all, january, february, ... , june) :")).lower()

         # get user input for day of week (all, monday, tuesday, ... sunday)
        day = str(input("Enter the day of the week :")).lower()

        if city not in valid_citys:
            raise ValueError(f"Invalid city: {city}")

        if month not in valid_months:
            raise ValueError(f"Invalid month: {month}")

        if day not in valid_days:
            raise ValueError(f"Invalid day: {day}")

        print(f"Valid input: Month = {month}, Day = {day}")

    except ValueError as e:
        print(f"Error: {e}")

    except Exception as e:
        print(f"An unexpected error occurred: {e}")

    print('-'*40)


    return city, month, day

def load_data(city, month, day):
    """
    Loads data for the specified city and filters by month and day if applicable.

    Args:
        (str) city - name of the city to analyze
        (str) month - name of the month to filter by, or "all" to apply no month filter
        (str) day - name of the day of week to filter by, or "all" to apply no day filter
    Returns:
        df - Pandas DataFrame containing city data filtered by month and day
    """
    # load data file into a dataframe
    try:
         if city not in CITY_DATA:
            print(f"Error: Invalid city '{city}'. Please choose from {', '.join(CITY_DATA.keys())}")
            return None
         try:
              df = pd.read_csv(CITY_DATA[city])
         except FileNotFoundError :
             print(f"Error: Data file for {city} not found.")
             return None

         except pd.errors.EmptyDataError:
             print(f"Error: Data file for {city} is empty.")
             return None
         try:
              df['Start Time'] = pd.to_datetime(df['Start Time'])
              # to get the month and day
              df['month'] = df['Start Time'].dt.month
              df['day_of_week'] = df['Start Time'].dt.day_name()
              df['hour'] = df['Start Time'].dt.hour
         except KeyError :
            print("Error: Required column 'Start Time' not found in data.")
            return None

         except pd.errors.OutOfBoundsDatetime:
            print("Error: Invalid datetime values in 'Start Time' column.")
            return None


         if month != 'all':
            months = ['january', 'february', 'march', 'april', 'may', 'june']
            try:
                month = months.index(month.lower()) + 1
                df = df[df['month'] == month]

                if df.empty:
                    print(f"No data available for month: {month}")
                    return None
            except ValueError:
                print(f"Error: Invalid month '{month}'. Please choose from {', '.join(months)} or 'all'")
                return None

         if day != 'all':
            valid_days = ['monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday', 'sunday']

            if day.lower() not in valid_days:
                print(f"Error: Invalid day '{day}'. Please choose from {', '.join(valid_days)} or 'all'")
                return None

            #df = df[df['day_of_week'] == day.lower()]
            df = df[df['day_of_week'].str.lower() == day.lower()]
            if df.empty:
                print(f"No data available for day: {day}")
                return None


         return df

    except Exception as e:
        print(f"Unexpected error in load_data: {str(e)}")
        return None

def time_stats(df):
    """Displays statistics on the most frequent times of travel."""

    if df is None or df.empty:
        print("No data available for time statistics.")
        return
    try:

        print('\nCalculating The Most Frequent Times of Travel...\n')
        start_time = time.time()

        try:
            # display the most common month
               common_month = df['month'].mode()[0]
               print(f'Most common month: {common_month}')

        except (KeyError, IndexError):
            print("Unable to calculate most common month.")

        try:
            # display the most common day of week

               common_day = df['day_of_week'].mode()[0]
               print(f'Most common day: {common_day}')

        except (KeyError, IndexError):
            print("Unable to calculate most common day.")

        try:
            # display the most common start hour
            common_hour = df['hour'].mode()[0]
            print(f'Most common hour: {common_hour}')

        except (KeyError, IndexError):
            print("Unable to calculate most common hour.")

        print("\nThis took %s seconds." % (time.time() - start_time))
        print('-'*40)

    except Exception as e:
        print(f"Unexpected error in time_stats: {str(e)}")

def display_raw_data(df):
    """Displays 5 lines of raw data upon user request."""
    if df is None or df.empty:
        print("No data available to display.")
        return

    start_loc = 0
    while True:
        user_input = input("\nWould you like to see 5 lines of raw data? Enter yes or no: ").strip().lower()
        if user_input == 'yes':
            end_loc = start_loc + 5
            print(df.iloc[start_loc:end_loc])  # Display the next 5 lines of raw data
            start_loc = end_loc
            if start_loc >= len(df):
                print("No more data to display.")
                break
        elif user_input == 'no':
            break
        else:
            print("Invalid input. Please enter 'yes' or 'no'.")

def station_stats(df):
    """Displays statistics on the most popular stations and trip."""

    if df is None or df.empty:
        print("No data available for station statistics.")
        return
    try:
        print('\nCalculating The Most Popular Stations and Trip...\n')
        start_time = time.time()
        try:
            # display most commonly used start station
            common_start = df['Start Station'].mode()[0]
            print(f'Most common start station: {common_start}')
        except (KeyError, IndexError):
            print("Unable to calculate most common start station.")

        try:
            # display most commonly used end station
            common_end = df['End Station'].mode()[0]
            print(f'Most common End station: {common_end}')

        except (KeyError, IndexError):
            print("Unable to calculate most common enf station.")

        try:
            # display most frequent combination of start station and end station trip
            # to creat a new row that consists of the start station and end station
            df['route'] = 'From ' + df['Start Station'] + ' to ' + df['End Station']
            common_route = df['route'].mode()[0]
            print(f'Most common route: {common_route}')
        except (KeyError, IndexError):
            print("Unable to calculate most common route.")


        print("\nThis took %s seconds." % (time.time() - start_time))
        print('-'*40)

    except Exception as e:
        print(f"Unexpected error in station_stats: {str(e)}")

def trip_duration_stats(df):
    """Displays statistics on the total and average trip duration."""

    # Check if the DataFrame is empty or None
    if df is None or df.empty:
        print("No data available for trip duration statistics.")
        return

    print('\nCalculating Trip Duration...\n')
    start_time = time.time()

    # Calculate and display total and mean travel time
    try:
        total_duration = df['Trip Duration'].sum()
        mean_duration = df['Trip Duration'].mean()
        
        print(f'Total travel time: {total_duration} seconds')
        print(f'Mean travel time: {mean_duration} seconds')

    except KeyError:
        print("Error: 'Trip Duration' column not found in the DataFrame.")
    except Exception as e:
        print(f"Unexpected error in trip_duration_stats: {str(e)}")
    finally:
        print("\nThis took %s seconds." % (time.time() - start_time))
        print('-' * 40)

def user_stats(df):
    """Displays statistics on bikeshare users."""

    if df is None or df.empty:
        print("No data available for user statistics.")
        return
    try:
        print('\nCalculating User Stats...\n')
        start_time = time.time()

        try:
            # Display counts of user types
            user_types = df['User Type'].value_counts()
            print('User Types:')
            for user_type, count in user_types.items():
                print(f'  {user_type}: {count}')
        except KeyError:
            print("User type data not available.")

        try:
            # Display counts of gender
            gender_counts = df['Gender'].value_counts()
            print('\nGender Counts:')
            for gender, count in gender_counts.items():
                print(f'  {gender}: {count}')
        except KeyError:
            print("Gender data not available for this city.")

        try:
            # Display earliest, most recent, and most common year of birth
            earliest_year = int(df['Birth Year'].min())
            recent_year = int(df['Birth Year'].max())
            common_year = int(df['Birth Year'].mode()[0])
            print('\nBirth Year Stats:')
            print(f'  Earliest: {earliest_year}')
            print(f'  Most Recent: {recent_year}')
            print(f'  Most Common: {common_year}')
        except KeyError:
            print("Birth year data not available for this city.")
        except ValueError:
            print("Invalid birth year data found.")

        print(f"\nThis took {time.time() - start_time:.2f} seconds.")
        print('-' * 40)

    except Exception as e:
        print(f"Unexpected error in user_stats: {str(e)}")

def plot_trip_start_times(df):
    """to show an interactive bar chart of trip counts by start hour."""
    if df is None or df.empty:
        print("No data available for visualization.")
        return

    start_hour_counts = df['hour'].value_counts().sort_index()
    fig = px.bar(
        x=start_hour_counts.index,
        y=start_hour_counts.values,
        labels={'x': 'Hour of the Day', 'y': 'Number of Trips'},
        title='Number of Trips by Start Hour'
    )
    fig.update_layout(xaxis=dict(tickmode='linear'), template='plotly_white')
    fig.show()

def plot_station_popularity(df):
    """to show an interactive scatter plot of popular start and end stations."""
    if df is None or df.empty:
        print("No data available for visualization.")
        return

    start_station_counts = df['Start Station'].value_counts().head(10)
    end_station_counts = df['End Station'].value_counts().head(10)
    data = {
        'Station': start_station_counts.index.tolist() + end_station_counts.index.tolist(),
        'Count': start_station_counts.values.tolist() + end_station_counts.values.tolist(),
        'Type': ['Start'] * len(start_station_counts) + ['End'] * len(end_station_counts)
    }

    fig = px.bar(
        data,
        x='Station',
        y='Count',
        color='Type',
        title='Top 10 Start and End Stations',
        labels={'Count': 'Number of Trips'}
    )
    fig.update_layout(template='plotly_white', xaxis_tickangle=-45)
    fig.show()

def plot_daily_trip_counts(df):
    """to show an interactive line chart of daily trip counts."""
    if df is None or df.empty:
        print("No data available for visualization.")
        return

    # Group data by day and count the number of trips
    df['date'] = df['Start Time'].dt.date
    daily_counts = df.groupby('date').size()

    # Create the interactive line chart
    fig = px.line(
        x=daily_counts.index,
        y=daily_counts.values,
        labels={'x': 'Date', 'y': 'Number of Trips'},
        title='Daily Trip Counts Over Time'
    )
    fig.update_layout(template='plotly_white')
    fig.show()

def main():
    while True:
        city, month, day = get_filters()
        df = load_data(city, month, day)

        display_raw_data(df)

        time_stats(df)
        station_stats(df)
        trip_duration_stats(df)
        user_stats(df)
        #plots
        plot_trip_start_times(df)
        plot_station_popularity(df)
        plot_daily_trip_counts(df)

        restart = input('\nWould you like to restart? Enter yes or no.\n')
        if restart.lower() != 'yes':
            break


if __name__ == "__main__":
	main()